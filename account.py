import random, os, string, requests

class account:
    """
    Developed by Trent
        
    A discord library made for easily interacting with discord's API in order to mess around with a user.

    Currently supported features
    ----------------------------
    GET:
        NewHeaders
        RandomNonce
        RandomCookies
        PaymentMethods
        UserChannelID
        Name
        Bio
        Id
        Email
    SET:
        Email
        Name
        Bio
    ACTIONS:
        MakeRequest
        AddFriend
        RemoveFriend
        SendMessage
        ScrapeMessages
        PurgeMessages
        JoinGuild
    """
    def __init__(self, token: str, proxies: dict|None):
        self.token = token
        self.proxies = proxies
        self.get = self._GetMethods(token)
        self.set = self._SetMethods(token)
        self.actions = self._ActionMethods(token)

    class _GetMethods():
        def __init__(self, token):
            self.token=token
        def NewHeaders(self, refer: str=None):
            """
            Grabs a set of new, unique headers for use in a discord request. These headers don't lock your account. Can be accessed via account.get.NewHeaders().

            Args:
                refer (optional): Overwrite the referer URL in the headers.
            """
            if refer == None:
                refer = "https://discord.com/channels/@me"
            cookies = [
                ("locale", "en-GB"),
                ("__dcfduid", self.RandomCookies(43)),
                ("__sdcfduid", self.RandomCookies(96)),
                ("__stripe_mid", "-".join(map(self.RandomCookies, (18, 4, 4, 4, 18)))),
                ("__cfruid", self.RandomCookies(40) + "-" + "".join(random.choice(string.digits) for _ in range(10))),
            ]
            return {
                "accept": "*/*",
                "accept-encoding": "gzip, deflate",
                "accept-language": "en-GB",
                "origin": "https://discord.com",
                "sec-fetch-dest": "empty", 
                "sec-fetch-mode": "cors",
                "sec-fetch-site": "same-origin",
                "content-type": "application/json",
                "authorization": self.token,
                "referer": refer,
                "cookie": "; ".join(map("=".join, cookies)),
                "user-agent": "Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) discord/0.1.9 Chrome/83.0.4103.122 Electron/9.4.4 Safari/537.36",
                "x-super-properties": "eyJvcyI6IldpbmRvd3MiLCJicm93c2VyIjoiRGlzY29yZCBDbGllbnQiLCJyZWxlYXNlX2NoYW5uZWwiOiJzdGFibGUiLCJjbGllbnRfdmVyc2lvbiI6IjAuMS45Iiwib3NfdmVyc2lvbiI6IjEwLjAuMTc3NjMiLCJvc19hcmNoIjoieDY0Iiwic3lzdGVtX2xvY2FsZSI6ImVuLVVTIiwiY2xpZW50X2J1aWxkX251bWJlciI6OTM1NTQsImNsaWVudF9ldmVudF9zb3VyY2UiOm51bGx9",
                "x-debug-options": "bugReporterEnabled",
            }
        def RandomNonce(self):
            """
            Generates a random nonce for use in certain requests. Not often used.
            """
            return os.urandom(16).hex()
        def RandomCookies(self, length: int):
            """
            Generates a random hex string for use in request cookies. Can be accessed with account.randomCookies().

            Args:
                length (int): The length of the randomly generated bytes object after being converted to hex.
            """
            return os.urandom(length).hex()[length:]
        def PaymentMethods(self) -> requests.Response:
            """
            Gets the payment methods of the user's account.
            """
            return requests.get("https://discord.com/api/v9/users/@me/billing/payment-sources", headers=self.get.NewHeaders()).json()
        def UserChannelID(self, userid: str|int) -> requests.Response:
            """
            Gets a discord user's DM channel ID.
            
            Args:
                userid (str|int): The ID of the user to get the channel ID of.
            """
            return requests.post('https://discord.com/api/v9/users/@me/channels', json = {'recipients': [userid]}, headers={"authorization": self.token}).json()['id']
        def Name(self) -> str:
            """
            Gets the name of the discord account
            """
            return self.actions.MakeRequest({}, type="GET").json()["username"]
        def Bio(self) -> str:
            """
            Gets the bio of the discord account
            """
            return self.actions.MakeRequest({}, type="GET").json()["bio"]
        def Id(self) -> str:
            """
            Gets the id of the discord account
            """
            return self.actions.MakeRequest({}, type="GET").json()["id"]
        def Email(self) -> str:
            """
            Returns the discord account's email address.
            """
            return self.actions.MakeRequest({}, type="GET")["email"]
    class _SetMethods():
        def __init__(self,token):
            self.token=token
        def Email(self, password: str, newAddress: str) -> dict:
            """
            Sets the email of the account, but requires you to know the password. A new address should also be provided.

            Args:
                password (str): The account's current password, required for email changing.
                newAddress (str): The new email for the discord account.
            """
            password = password
            r = self.actions.MakeRequest({"email": newAddress, "password": password})
            s = requests.post("https://discord.com/api/v9/auth/verify/resend", headers = self.get.NewHeaders(), proxies = self.proxies)
            print(f"Verification email sent, check {newAddress}")
            return {
                "email": newAddress,
                "password": password,
                "token": self.token
            }
        def Name(self, password: str, newName: str) -> requests.Response:
            """
            Set the discord account's username, requires the password and a new username.

            Args:
                password (str): The current password of the account.
                newName (str): The new username for the account
            """
            return self.actions.MakeRequest({"password": password, "username": newName}, type="PATCH")
        def Bio(self, newBio: str) -> requests.Response:
            """
            Set the account bio for the discord account

            Args:
                newBio (str): The new bio that will be set
            """
            return self.actions.MakeRequest({"bio": newBio}, type="PATCH")
    class _ActionMethods():
        def __init__(self, token):
            self.token = token
        def MakeRequest(self, json: dict, **kwargs) -> requests.Response:
            """
            A method used to quickly and easily make a request. Not recommended for use outside of current methods, use your own requests if need be.

            Args:
                json (dict): The json provided to the request.
                content (optional): Pass content to the request.
                headers (optional): Overwrite headers with your own, uses get.NewHeaders if passed.
            """
            content = kwargs.get("content", None)
            if kwargs.get("headers", None) == None:
                headers = self.get.NewHeaders(kwargs.get("referer", None))
            else:
                headers = {
                    "authorization": self.token
                }
            url = kwargs.get("url", "https://discord.com/api/v9/users/@me")
            if kwargs.get("type", "PATCH").upper():
                r = requests.patch(url, json = json, headers = headers, proxies = self.proxies, content=content)
            elif kwargs.get("type", "POST").upper():
                r = requests.post(url, json = json, headers = headers, proxies = self.proxies, content=content)
            elif kwargs.get("type", "GET").upper():
                r = requests.get(url, json = json, headers = headers, proxies = self.proxies, content=content)
            elif kwargs.get("type", "PUT").upper():
                r = requests.put(url, json = json, headers = headers, proxies = self.proxies, content=content)
            elif kwargs.get("type", "DELETE").upper():
                r = requests.delete(url, json = json, headers = headers, proxies = self.proxies, content=content)

            return r
        def AddFriend(self, **kwargs) -> requests.Response:
            """
            Sends a friend request to the provided user.

            Args:
                friendid (str): The user id of the user to remove as a friend
                tag (optional): Formatted as {'name': USERNAME, 'discriminator': DISCRIMINATOR}
            """
            tag = kwargs.get("tag", None)
            username, discriminator = None,None
            headers = {
                "accept": "/",
                "accept-encoding": "gzip, deflate, br",
                "accept-language": "en-US,en-CH;q=0.9,en-GB;q=0.8",
                "authorization": self.token,
                "content-length": "0",
                "origin": "https://discord.com",
                "referer": "https://discord.com/channels/@me",
                "sec-fetch-dest": "empty",
                "sec-fetch-mode": "cors",
                "sec-fetch-site": "same-origin",
                "user-agent": "Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) discord/1.0.669 Chrome/91.0.4472.164 Electron/13.6.6 Safari/537.36",
                "x-debug-options": "bugReporterEnabled",
                "x-discord-locale": "hu",
                "x-super-properties": "eyJvcyI6IldpbmRvd3MiLCJicm93c2VyIjoiRGlzY29yZCBDbGllbnQiLCJyZWxlYXNlX2NoYW5uZWwiOiJjYW5hcnkiLCJjbGllbnRfdmVyc2lvbiI6IjEuMC42NjkiLCJvc192ZXJzaW9uIjoiMTAuMC4xOTA0MyIsIm9zX2FyY2giOiJ4NjQiLCJzeXN0ZW1fbG9jYWxlIjoiZW4tVVMiLCJjbGllbnRfYnVpbGRfbnVtYmVyIjoxMzMwOTgsImNsaWVudF9ldmVudF9zb3VyY2UiOm51bGx9"
            }
            if tag == None:
                user_id = kwargs.get("userid", None)
                if user_id == None:
                    print("[ERROR] addFriend encountered a severe error! Check returned value for error.")
                    return {"error": "UserID provided: "+{user_id}+" - if the value to the left is 'None' then pass 'userid=<ID>' to the argument"}
                headersv2 = {'authorization': 'NzcwMzUyODYyNzMwNzgwNzI0.GGVjF-.JZxlW7GiGnH273XY6zxKsw4KAzfsXHmBuOUO1A'}
                send = requests.get(f"https://discord.com/api/v9/users/{str(user_id)}", headers=headersv2) 

                b = send.json()
                username = b["username"]
                discriminator = b["discriminator"]
            else:
                username = tag["username"]
                discriminator = tag["discriminator"]

            url = "https://discord.com/api/v9/users/@me/relationships"
            body = {"username": username, "discriminator": discriminator}
            return requests.post(url, headers=headers, json=body)
        def RemoveFriend(self, friendid: str) -> requests.Response:
            """
            Remove a user as a friend.

            Args:
                friendid (str): The user id of the user to remove as a friend.
            """
            return self.actions.MakeRequest({}, type="DELETE", url=f"https://discord.com/api/v9/users/@me/relationships/{friendid}")
        def SendMessage(self, message: str, channelid: str|int) -> requests.Response:
            """
            Send a message into a provided channel.
            
            Args:
                message (str): The message for the user to send.
                channelid (str|int): The id of the channel to send the message into. If it is a DM, use getUserChannelID for the DM's channel id.
            """
            return requests.post(f"https://discord.com/api/v9/channels/{channelid}/messages", headers = {"authorization": self.token}, data={"content": message})
        def ScrapeMessages(self, channelid: str|int, limit: str|int) -> list:
            """
            Scrape all the messages from a channel into a list of dict values.

            Args:
                channelid (str|int): The ID of the channel to scrape messages from.
                limit (str|int): The amount of messages to scrape from a channel.
            """
            messages = requests.get(f"https://discord.com/api/v9/channels/{channelid}/messages?limit={limit}", headers=self.get.NewHeaders()).json()
            total = []
            for eachMessage in range(len(messages)):
                msg = messages[eachMessage]
                total.append({
                    "author": {msg["author"]["id"]},
                    "content": msg["content"],
                    "id": msg["id"]
                })
            return total
        def PurgeMessages(self, channelid: str) -> list:
            """
            Purge all the account's messages from a channel

            Args:
                channelid (str): The ID of the channel to purge messages from.
            """
            purgedResponse = []
            messages = self.actions.ScrapeMessages(channelid)
            for i in messages:
                print(i["author"], self.get.Id())
                print(i["id"])
                if i["author"] == {self.get.Id()}:
                    purgedResponse.append(requests.delete(f"https://discord.com/api/v9/channels/{channelid}/messages/{i['id']}", headers=self.get.NewHeaders()))
            return purgedResponse
        def JoinGuild(self, inviteCode: str):
            """
            Join a guild using a provided invite link
            
            Args:
                inviteCode (str): The invite code for the guild
            """
            if "discord.gg" in inviteCode:
                inviteCode = inviteCode.split(".gg/")[1]
            headers = self.get.NewHeaders()
            headers["x-context-properties"] = "eyJsb2NhdGlvbiI6Ik1hcmtkb3duIExpbmsifQ=="
            return requests.post(f"https://discord.com/api/v9/invites/{inviteCode}", headers=headers, json={})
